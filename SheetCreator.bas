Attribute VB_Name = "SheetCreator"
Option Explicit
Dim fDay As Integer
Dim lDay As Integer
'Sheetcreator initializes the OrderSheets class and then calls code to format the order sheets


'Excel 2016 (and some other versions) have a bug where a new worksheet generated by code only "partially" activates using Worksheet.Active
'The result of this is a worksheet where the sheet itself is active and can be edited, but the ribbon is completely frozen
'The quickest way to fix this is to right click in a cell and the left click, so we set up an event handler to do this rapidly.
Public Declare PtrSafe Sub mouse_event Lib "user32" (ByVal dwFlags As Long, ByVal dx As Long, ByVal dy As Long, ByVal cButtons As Long, ByVal dwExtraInfo As Long)
Public Const MOUSEEVENTF_LEFTDOWN = &H2
Public Const MOUSEEVENTF_LEFTUP = &H4
Public Const MOUSEEVENTF_RIGHTDOWN As Long = &H8
Public Const MOUSEEVENTF_RIGHTUP As Long = &H10

Sub MakeOrderBook()
    'Initializes the collection of order sheets, then calls FormatSheets to write to them
    On Error GoTo ErrorHandle:
    
    'First we're going to clean up linked premeds - a premed cannot occur on the day that a linked premed occurs
    cleanPreMeds
    
    Set OrderSheets = Nothing
    Set OrderSheets = New clOrderSheets
    
    'Now Add and format the worksheets
    FormatSheets
    
BeforeExit:
    Set OrderSheets = Nothing
    Exit Sub
ErrorHandle:
    MsgBox err.Description & " in MakeOrderBook, SheetCreator"
    Resume BeforeExit
End Sub
Private Sub FormatSheets()
    'Master subroutine that calls component subroutines to write all of the information to the order sheet
    Dim i As Integer
    Dim curWeek As Integer
    Dim labsStart As Range
    Dim PreMedsStart As Range
    Dim ChemoStart As Range
    Dim StandbyStart As Range
    Dim newBook As Workbook
    Dim curSheet As Worksheet
    Dim curCycle As Integer
    Dim cycleWeek As Integer
    Dim sheetName As String
    Dim Dayswk As String
    
    On Error GoTo ErrorHandle
    
    Set newBook = Workbooks.Add
    Application.ScreenUpdating = False
    For i = 1 To OrderSheets.Count
        With OrderSheets.Item(i)
            'Create a new worksheet by copying our preformated order paper
            Workbooks(InitialWorkbook).Worksheets("Order Paper").Copy After:=newBook.Sheets(newBook.Sheets.Count)
            
            'Calculate the cycle and week
            curWeek = .iWeekNum
            
            'If the cycle length and cycle are both filled in and numbers, calculate
            If Information.lCycleLength <> 0 And Information.lCycle <> 0 Then
                curCycle = Information.lCycle + WorksheetFunction.RoundUp(curWeek / Information.lCycleLength, 0) - 1
                If curWeek Mod Information.lCycleLength = 0 Then
                    cycleWeek = Information.lCycleLength
                Else
                    cycleWeek = curWeek Mod Information.lCycleLength
                End If
            'If cycle length is not entered, but cycle is nonzero
            ElseIf Information.lCycleLength = 0 And Information.lCycle <> 0 Then
                curCycle = Information.lCycle
                cycleWeek = curWeek
            'If cycle is zero, then text is entered into that field and will be dealt with separately
            Else
                cycleWeek = curWeek
            End If
            
            
            'Name the sheet
            'If lCycle is zero, that means that a cycle name and not number was entered
            If Information.lCycle = 0 Then
                sheetName = Information.sCycleName & " - Week " & cycleWeek
            Else
                sheetName = "Cycle " & curCycle & " - Week " & cycleWeek
            End If
            newBook.Sheets(newBook.Sheets.Count).Name = sheetName
            Set curSheet = newBook.Sheets(sheetName)
            
            'Set the starting locations for the fillable areas
            Set labsStart = curSheet.Range("B12")
            Set PreMedsStart = curSheet.Range("B15")
            Set ChemoStart = curSheet.Range("B18")
            Set StandbyStart = curSheet.Range("B21")
            
            'Add demographic data
            curSheet.Range("C3") = Information.sProvName
            curSheet.Range("F3") = Information.sProvPPG
            curSheet.Range("H3") = Information.sProvPage
            curSheet.Range("G4") = "NPI:   " & Information.sProvNPI
            curSheet.Range("G4").Characters(0, 7).Font.Size = 8
            curSheet.Range("I3") = Information.sPName
            If Not Information.datDOB = 0 Then
                curSheet.Range("I4") = "DOB: " & Information.datDOB
            End If
            curSheet.Range("K4") = "* " & Information.sMRN & " *"
            curSheet.Range("B6") = "Protocol " & Information.sProtocol
            'Alternating sheet schema if a cycle name vs a number is present
            'For cycle names (lCycle = 0), we write the name and the days that the cycle covers
            If Information.lCycle = 0 Then
                curSheet.Range("D6") = Information.sCycleName
                curSheet.Range("D6:E6").Merge
                curSheet.Range("D6").ShrinkToFit = True
                Dayswk = cycleDayProcess(i)
                curSheet.Range("F6") = Dayswk
            'For cycle numbers, we write the cycle number and week number
            Else
                curSheet.Range("D6") = "Cycle #" & curCycle
                curSheet.Range("F6") = "Week " & cycleWeek
            End If
            curSheet.Range("I6") = Information.dubHeight & "cm"
            curSheet.Range("K6") = Information.dubWeight & "kg"
            curSheet.Range("M6") = Information.dubBSA
            If Len(Information.sAllergies) > 0 Then
                curSheet.Range("D9") = Information.sAllergies
            Else
                curSheet.Range("D9") = "NKDA"
            End If
            curSheet.Range("I9") = Information.sDiagnosis
            If Len(Information.sPatCOGID) > 0 Then
                curSheet.Range("B8").Font.Bold = True
                curSheet.Range("B8") = " ** ON STUDY - COG ID: " & Information.sPatCOGID & " **"
            Else
                curSheet.Range("B8") = " * Not on Study * "
            End If
            
            'First, add the labs to the current sheet
            writeLabs i, curWeek, labsStart
            
            'clear formatting from the blank line below labs and adjust its height
            PreMedsStart.offset(-3, 0).Clear
            PreMedsStart.offset(-3, 1).MergeArea.Clear
            PreMedsStart.offset(-3, 2).Clear
            PreMedsStart.offset(-3, 3).MergeArea.Clear
            PreMedsStart.offset(-3).RowHeight = PreMedsStart.offset(-3).RowHeight / 2
            
            'Now add the premeds
            writePreMeds i, curWeek, PreMedsStart
            
            'clear formatting from the blank line below PreMeds and adjust its height
            ChemoStart.offset(-3, 0).Clear
            ChemoStart.offset(-3, 1).MergeArea.Clear
            ChemoStart.offset(-3, 2).Clear
            ChemoStart.offset(-3, 3).MergeArea.Clear
            ChemoStart.offset(-3).RowHeight = ChemoStart.offset(-2).RowHeight / 2
            
            'Now add the drugs
            writeDrugs i, curWeek, ChemoStart
            
            'clear the formatting from the blank line below chemo and adjust its height
            StandbyStart.offset(-3, 0).Clear
            StandbyStart.offset(-3, 1).MergeArea.Clear
            StandbyStart.offset(-3, 2).Clear
            StandbyStart.offset(-3, 3).MergeArea.Clear
            StandbyStart.offset(-3).RowHeight = ChemoStart.offset(-2).RowHeight / 2
            
            'Last, write the standby medications
            writeStandby i, StandbyStart
        End With
    Next i
    
    'Activate the new book and attempt to overcome an excel bug where the ribbon remains frozen by doing an automated and rapid right and left click
    newBook.Activate
    mouse_event MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0
    mouse_event MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0
    mouse_event MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0
    mouse_event MOUSEEVENTF_LEFTUP, 0, 0, 0, 0
    
    'Delete blank sheet1 worksheet
    Application.DisplayAlerts = False
    ActiveWorkbook.Sheets("Sheet1").Delete
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    
BeforeExit:
    Set labsStart = Nothing
    Set PreMedsStart = Nothing
    Set ChemoStart = Nothing
    Exit Sub
ErrorHandle:
    MsgBox err.Description & " in FormatSheets, SheetCreator"
    Resume BeforeExit
End Sub
Private Sub writeLabs(ByVal sheetIndex As Integer, ByVal curWeek As Integer, labsStart As Range)
    'Writes the labs to the order sheet; labs are a special case compared to premeds or chemo drugs
    'because we want to concatenate them to one line if they are given on the same day
    Dim j As Integer, k As Integer, ind As Integer
    Dim match As Boolean
    Dim s As String, t As String, u As String
    Dim concLabs() As String
    Dim concDays() As String
    
    On Error GoTo ErrorHandle
    
    ReDim concLabs(0)
    ReDim concDays(0)
    
    For j = 1 To OrderSheets.Item(sheetIndex).CountLabs
        With OrderSheets.Item(sheetIndex).itLab(j)
            match = False
            
            'Create a string for the days that a drug is given on
            s = DayProcess(curWeek, OrderSheets.Item(sheetIndex).itLab(j))
            
            'Compare our string to our array of day strings - if there's a match, append the name of the lab to the
            'corresponding string of labs
            For k = 0 To ArrayLen(concDays) - 1
                If concDays(k) = s Then
                    concLabs(k) = concLabs(k) & "         " & .sName
                    match = True
                End If
            Next k
            
            'If there was no match, add an entry to our days and labs array for both the string of days and the lab name
            If match = False Then
                If concDays(0) = "" Then
                    concDays(0) = s
                    concLabs(0) = .sName
                Else
                    ReDim Preserve concDays(UBound(concDays) + 1)
                    ReDim Preserve concLabs(UBound(concLabs) + 1)
                    concDays(UBound(concDays)) = s
                    concLabs(UBound(concLabs)) = .sName
                End If
                insertRowBelow labsStart                                'Add a new blank line
                ind = .linIndex(curWeek, .iDay(0, curWeek))
                labsStart.offset(UBound(concDays), 0) = .datDate(ind)     'And write the starting date
            End If
        End With
    Next j
    
    'Once we've iterated through every lab, we can write all of our labs to the sheet
    For j = 0 To ArrayLen(concDays) - 1
        labsStart.offset(j, 1) = concDays(j)
        labsStart.offset(j, 3) = concLabs(j)
    Next j
BeforeExit:
    Erase concDays, concLabs
    Exit Sub
ErrorHandle:
    MsgBox err.Description & " in writeLabs, SheetCreator."
    Resume BeforeExit
End Sub
Private Sub writePreMeds(ByVal sheetIndex As Integer, ByVal curWeek As Integer, PreMedsStart As Range)
    'Write the premeds to the order sheet; relatively simple compared to labs as we simply iterate through the premeds,
    'generating their list of days and then writing their information
    Dim j As Integer, ind As Integer
    Dim s As String
    
    On Error GoTo ErrorHandle

    For j = 1 To OrderSheets.Item(sheetIndex).CountPreMeds
        With OrderSheets.Item(sheetIndex).itPreMed(j)
            'Add a blank row
            insertRowBelow PreMedsStart

            'Create the string for the days the premed is given on
            s = DayProcess(curWeek, OrderSheets.Item(sheetIndex).itPreMed(j))
            
            ind = .linIndex(curWeek, .iDay(0, curWeek))
            PreMedsStart.Value = .datDate(ind)
            PreMedsStart.offset(0, 1) = s
            
            'Check to see if this is a product of our custom entry box, which won't have a name or dose
            'If it is, then merge all the rows on this line and write the custom entry (stored in SpecInstruct)
            If .sName = "" And .dubCalcDose = 0 Then
                ActiveSheet.Range(PreMedsStart.offset(0, 3), PreMedsStart.offset(0, 12)).Merge
                PreMedsStart.offset(0, 3) = .sSpecInstruct
                PreMedsStart.offset(0, 3).HorizontalAlignment = xlHAlignLeft
            'If it isn't, then write all of the properties of the premedication
            Else
                PreMedsStart.offset(0, 3) = .sName
                PreMedsStart.offset(0, 3).ShrinkToFit = True
                PreMedsStart.offset(0, 6) = Round(.dubCalcDose, 2) & " " & .sCalcDoseUnits
                PreMedsStart.offset(0, 6).ShrinkToFit = True
                PreMedsStart.offset(0, 7) = .sRoute
                PreMedsStart.offset(0, 8) = .sSpecInstruct
                End If
        End With
        'Move the active row down
        Set PreMedsStart = PreMedsStart.offset(1, 0)
    Next j
    
    Exit Sub
ErrorHandle:
    MsgBox err.Description & " in writePreMeds, Sheetcreator."
End Sub
Private Sub writeDrugs(ByVal sheetIndex As Integer, ByVal curWeek As Integer, ChemoStart As Range)
    'Write the chemotherapy drugs; functions nearly identically to writePremeds except we don't have
    'to account for custom entries but do have to account for home medications
    Dim j As Integer, ind As Integer, wkind As Integer, k As Integer
    Dim s As String

    On Error GoTo ErrorHandle
    For j = 1 To OrderSheets.Item(sheetIndex).CountDrugs
        With OrderSheets.Item(sheetIndex).itDrug(j)
            'Add a new blank row
            insertRowBelow ChemoStart
            
            'Create a string of the days for the drug
            's = drugDayProcess(sheetIndex, curWeek, j)
            s = DayProcess(curWeek, OrderSheets.Item(sheetIndex).itDrug(j))
            
            'Find the index of the week
            'The weeks/days are separate arrays for the drug class
    
            ind = .linIndex(curWeek, .iDay(0, curWeek))
            ChemoStart.Value = .datDate(ind)                'Write the date
            ChemoStart.offset(0, 1) = s
            
            'Write the dosing information and drug name
            ChemoStart.offset(0, 3) = .sDrugName & " (" & .dubDose & " " & .sDoseUnits & ")"
            ChemoStart.offset(0, 3).ShrinkToFit = True
            'If its a home med, note that
            If .iLocation = 2 Then
                ChemoStart.offset(0, 3) = .sDrugName & " (home medication)"
                ChemoStart.offset(0, 3).Font.Italic = True
            End If
            ChemoStart.offset(0, 6) = Round(.dubCalcDose, 2) & " " & .sCalcDoseUnits
            ChemoStart.offset(0, 6).ShrinkToFit = True
            ChemoStart.offset(0, 7) = .sRoute
            ChemoStart.offset(0, 8) = .sInstructions
        End With
        'Set our active row to the row below
        Set ChemoStart = ChemoStart.offset(1, 0)
    Next j
    
    Exit Sub
ErrorHandle:
    Debug.Print "Error in Sheet #" & sheetIndex & "(week " & curWeek & ")"
    Debug.Print "Trying to process drug #" & j & " (" & OrderSheets.Item(sheetIndex).CountDrugs & " drugs total)"
    MsgBox err.Description & " in writeDrugs, Sheetcreator."
End Sub
Private Sub writeStandby(ByVal sheetIndex As Integer, StandbyStart As Range)
    'Writes the standby medications.  These are hardcoded because they are unlikely to ever change and are
    'always ordered the same way
    Dim j As Integer, ind As Integer
    Dim s As String
    Dim rng As Range
    
    On Error GoTo ErrorHandle
    
    s = ""
    
    With OrderSheets.Item(sheetIndex)
        'If there are no standby meds for this week, delete the space on the order sheet
        If .sStandby(0) = "" Then
            Set rng = ActiveSheet.Range(StandbyStart.offset(-2, 0), StandbyStart.offset(4, 3))
            rng.EntireRow.Delete
        'Otherwise, iterate through the standby array that holds names of drugs that need standby meds
        ' and concatenate them
        Else
            For j = 0 To .CountStandby - 1
                If Len(s) = 0 Then
                    s = .sStandby(j)
                ElseIf Len(s) > 0 And j < (.CountStandby - 1) Then
                    s = s & ", " & .sStandby(j)
                Else
                    s = s & " and " & .sStandby(j)
                End If
            Next j
        
        'Write the properties of the standby meds
                StandbyStart.Value = "Keep at the bedside during administration of " & s
                
                StandbyStart.offset(0, 3) = "Benadryl"
                StandbyStart.offset(1, 3) = "Epinepherine"
                StandbyStart.offset(2, 3) = "Hydrocortisone"
                StandbyStart.offset(0, 7) = "IV"
                StandbyStart.offset(0, 8) = "Rapid push"
                StandbyStart.offset(1, 7) = "SQ"
                StandbyStart.offset(1, 8) = "Injection"
                StandbyStart.offset(2, 7) = "IV"
                StandbyStart.offset(2, 8) = "Rapid push"
                'If weight > 50, all are at their max dose
                If Information.dubWeight > 50 Then
                    StandbyStart.offset(0, 6) = "50 mg"
                    StandbyStart.offset(1, 6) = "0.3 mg"
                    StandbyStart.offset(2, 6) = "50 mg"
                'If weight is between 30 and 50, epi is at its max dose and benadryl & hydrocortisone are
                'dosed at 1 mg/kg
                ElseIf Information.dubWeight > 30 And Information.dubWeight < 50 Then
                    StandbyStart.offset(0, 6) = Information.dubWeight & " mg"       'Dosed at 1 mg/kg
                    StandbyStart.offset(1, 6) = "0.3 mg"
                    StandbyStart.offset(2, 6) = Information.dubWeight & " mg"       'Dosed at 1 mg/kg
                'If weight is less than 30, benadryl & hydrocortisone are dosed at 1 mg/kg and epi is dosed at
                ' 0.01 mg/kg
                Else
                    StandbyStart.offset(0, 6) = Information.dubWeight & " mg"
                    StandbyStart.offset(1, 6) = Information.dubWeight * 0.01 & " mg"
                    StandbyStart.offset(2, 6) = Information.dubWeight & " mg"
                End If
                ActiveSheet.Range(StandbyStart, StandbyStart.offset(2, 2)).Merge
        End If
    End With
    Exit Sub
ErrorHandle:
    MsgBox err.Description & " in writeStandby, Sheetcreator."
End Sub
Private Function DayProcess(ByVal curWeek As Integer, curItem As Object) As String
    Dim i As Integer
    Dim first As Integer, last As Integer
    Dim firstind As Integer, lastind As Integer
    Dim s As String
    Dim DayOff As Integer
     
    On Error GoTo ErrorHandle
     
    'If the cycle is named (vs numbered), we're not going to display a week at the top of the sheet,
    ' only a day.  Consequently, we're going to display the absolute day (relative to cycle start)
    'rather than the day of the week the drug is being given on in the "Frequency" column.
    If Information.lCycle = 0 And Len(Information.sCycleName) > 0 Then
        DayOff = (curWeek - 1) * 7
    Else
        DayOff = 0
    End If
     
     With curItem
        If .numDays(curWeek) = 1 Then
            'If there is only day, no need for anything fancy
            s = "Day " & DayOff + .iDay(0, curWeek)
        ElseIf .numDays(curWeek) = 2 Then
            'Likewise, if there are only two days, concatenate and output
            s = "Day " & DayOff + .iDay(0, curWeek) & ", " & DayOff + .iDay(1, curWeek)
        Else
            'If there are three days things start to get tricky
            'First, we set up a first and last value  and then proceed into our loop
           s = "Days "
           first = DayOff + .iDay(0, curWeek)
           firstind = 0
           last = DayOff + .iDay(1, curWeek)
           lastind = 1
           For i = 2 To .numDays(curWeek) - 1
                'Test for whether or not the next item and the last item are contiguous
               If DayOff + .iDay(i, curWeek) - last = 1 Then
                   last = DayOff + .iDay(i, curWeek)
                   lastind = i
                   If i = .numDays(curWeek) - 1 Then
                    s = s & first & " - " & last
                   End If
                   'If not, then we build our string
               Else
                    If lastind - firstind = 1 Then
                       s = s & first & ", " & last
                    Else
                       s = s & first & " - " & last
                    End If
                    If .numDays(curWeek) - 1 - i = 0 Then
                        s = s & ", " & DayOff + .iDay(i, curWeek)
                        GoTo EndLoop
                    ElseIf .numDays(curWeek) - 1 - i = 1 Then
                       s = s & ", " & DayOff + .iDay(i, curWeek) & ", " & DayOff + .iDay(i + 1, curWeek)
                       GoTo EndLoop
                    ElseIf .numDays(curWeek) - 1 - i > 1 Then
                        's = s & .iDay(i + 1, curWeek)
                       first = DayOff + .iDay(i, curWeek)
                       firstind = i
                       last = DayOff + .iDay(i + 1, curWeek)
                       lastind = i + 1
                       i = i + 1
                   End If
               End If
           Next i
        End If
    End With
EndLoop:
    DayProcess = s
    
BeforeExit:
Exit Function
ErrorHandle:
    MsgBox err.Description & " in DayProcess, SheetCreator."
    Resume BeforeExit
End Function
Private Function cycleDayProcess(ByVal sheetIndex As Integer) As String
     Dim i As Integer
     Dim first As Integer, last As Integer
     Dim firstind As Integer, lastind As Integer
     Dim s As String
     
     On Error GoTo ErrorHandle
     
     With OrderSheets.Item(sheetIndex)
        If .CountDays = 1 Then
            'If there is only day, no need for anything fancy
            s = "Day " & .iDay(0)
        ElseIf .CountDays = 2 Then
            'Likewise, if there are only two days, concatenate and output
            s = "Day " & .iDay(0) & ", " & .iDay(1)
        Else
            'If there are three days things start to get tricky
            'First, we set up a first and last value  and then proceed into our loop
           s = "Days "
           first = .iDay(0)
           last = first
           firstind = 0
           last = .iDay(1)
           lastind = 1
           For i = 2 To .CountDays - 1
                'Test for whether or not the next item and the last item are contiguous
               If .iDay(i) - last = 1 Then
                   last = .iDay(i)
                   lastind = i
                   If i = .CountDays - 1 Then
                    s = s & first & " - " & last
                   End If
                   'If not, then we build our string
               Else
                    If lastind - firstind = 1 Then
                       s = s & first & ", " & last
                    Else
                       s = s & first & " - " & last
                    End If
                    If .CountDays - 1 - i = 0 Then
                        s = s & ", " & .iDay(i)
                        GoTo EndLoop
                    ElseIf .CountDays - 1 - i = 1 Then
                       s = s & ", " & .iDay(i) & ", " & .iDay(i + 1)
                       GoTo EndLoop
                    ElseIf .CountDays - 1 - i > 1 Then
                       first = .iDay(i)
                       firstind = i
                       last = .iDay(i + 1)
                       lastind = i + 1
                       i = i + 1
                   End If
               End If
           Next i
        End If
    End With
EndLoop:
    cycleDayProcess = s
    
BeforeExit:
Exit Function
ErrorHandle:
    MsgBox err.Description & " in cycleDayProcess, SheetCreator."
    Resume BeforeExit
End Function
Private Sub cleanPreMeds()
    Dim i As Integer, j As Integer, k As Integer, l As Integer, m As Integer, ind As Integer, dayind As Integer, offset As Integer
    Dim n As Integer, startday As Integer
    Dim match As Boolean
    
    On Error GoTo ErrorHandle
    
    For i = 1 To PreMeds.Count                                                              'For each Premed'
        With PreMeds.Item(i)
            If Len(.sLinkedKey) > 0 Then
                For j = 1 To 24                                                             'If there is a linked key, then
                    If .bWeek(j) Then                                                       'Iterate through all weeks
                        k = 0
                        m = .numDays(j) - 1
                        Do While m > k                                                      'And all days
                            startday = .iDay(k, j)
                            For l = 0 To PreMeds.Item(.sLinkedKey).numTiming - 1            'And compare to all days in the linked premed
                                offset = PreMeds.Item(.sLinkedKey).iTiming(l) + startday
                                If .containsDay(offset, j) <> -1 Then
                                    dayind = .containsDay(offset, j)
                                    ind = .linIndex(j, offset)                              'If there is a match, remove the day
                                    .RemoveDay dayind, j                                    'and its corresponding date
                                    .RemoveDate ind
                                    m = m - 1
                                End If
                            Next l
                            k = k + 1
                        Loop
                            'Now loop through the linked premed days and locate any entries
                            'that correspond to a parent that was deleted, then delete them
                        With PreMeds.Item(.sLinkedKey)
                            k = 0
                            m = .numDays(j) - 1
                            Do While m >= k
                                match = False
                                For l = 0 To PreMeds.Item(i).numDays(j) - 1
                                    For n = 0 To .numTiming - 1
                                        offset = PreMeds.Item(i).iDay(l, j) + .iTiming(n)
                                        If .iDay(k, j) = offset Then match = True
                                    Next n
                                Next l
                                If match = False Then
                                    ind = .linIndex(j, .iDay(k, j))
                                    .RemoveDay k, j
                                    .RemoveDate ind
                                    m = m - 1
                                    k = k - 1
                                End If
                                k = k + 1
                            Loop
                        End With
                    End If
                Next j
            End If
        End With
    Next i
    
    Exit Sub
ErrorHandle:
    MsgBox err.Description & " in cleanPreMeds, SheetCreator"
End Sub
